// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"github.com/SladeThe/yav"
	"github.com/SladeThe/yav/accumulators"
	"github.com/SladeThe/yav/internal"
)

var (
	requiredWithoutAllIntFuncs map[string]yav.ValidateFunc[int]
)

func RequiredWithoutAllInt() accumulators.RequiredWithoutAll[int] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllInt)
}

func provideRequiredWithoutAllInt(names string, required bool) yav.ValidateFunc[int] {
	if !required {
		return OmitEmpty[int]
	}

	if validateFunc, ok := requiredWithoutAllIntFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllIntFuncs, names, requiredWithoutAllInt(names))
}

func requiredWithoutAllInt(names string) yav.ValidateFunc[int] {
	return func(name string, value int) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllInt8Funcs map[string]yav.ValidateFunc[int8]
)

func RequiredWithoutAllInt8() accumulators.RequiredWithoutAll[int8] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllInt8)
}

func provideRequiredWithoutAllInt8(names string, required bool) yav.ValidateFunc[int8] {
	if !required {
		return OmitEmpty[int8]
	}

	if validateFunc, ok := requiredWithoutAllInt8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllInt8Funcs, names, requiredWithoutAllInt8(names))
}

func requiredWithoutAllInt8(names string) yav.ValidateFunc[int8] {
	return func(name string, value int8) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllInt16Funcs map[string]yav.ValidateFunc[int16]
)

func RequiredWithoutAllInt16() accumulators.RequiredWithoutAll[int16] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllInt16)
}

func provideRequiredWithoutAllInt16(names string, required bool) yav.ValidateFunc[int16] {
	if !required {
		return OmitEmpty[int16]
	}

	if validateFunc, ok := requiredWithoutAllInt16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllInt16Funcs, names, requiredWithoutAllInt16(names))
}

func requiredWithoutAllInt16(names string) yav.ValidateFunc[int16] {
	return func(name string, value int16) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllInt32Funcs map[string]yav.ValidateFunc[int32]
)

func RequiredWithoutAllInt32() accumulators.RequiredWithoutAll[int32] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllInt32)
}

func provideRequiredWithoutAllInt32(names string, required bool) yav.ValidateFunc[int32] {
	if !required {
		return OmitEmpty[int32]
	}

	if validateFunc, ok := requiredWithoutAllInt32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllInt32Funcs, names, requiredWithoutAllInt32(names))
}

func requiredWithoutAllInt32(names string) yav.ValidateFunc[int32] {
	return func(name string, value int32) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllInt64Funcs map[string]yav.ValidateFunc[int64]
)

func RequiredWithoutAllInt64() accumulators.RequiredWithoutAll[int64] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllInt64)
}

func provideRequiredWithoutAllInt64(names string, required bool) yav.ValidateFunc[int64] {
	if !required {
		return OmitEmpty[int64]
	}

	if validateFunc, ok := requiredWithoutAllInt64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllInt64Funcs, names, requiredWithoutAllInt64(names))
}

func requiredWithoutAllInt64(names string) yav.ValidateFunc[int64] {
	return func(name string, value int64) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllUintFuncs map[string]yav.ValidateFunc[uint]
)

func RequiredWithoutAllUint() accumulators.RequiredWithoutAll[uint] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllUint)
}

func provideRequiredWithoutAllUint(names string, required bool) yav.ValidateFunc[uint] {
	if !required {
		return OmitEmpty[uint]
	}

	if validateFunc, ok := requiredWithoutAllUintFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllUintFuncs, names, requiredWithoutAllUint(names))
}

func requiredWithoutAllUint(names string) yav.ValidateFunc[uint] {
	return func(name string, value uint) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllUint8Funcs map[string]yav.ValidateFunc[uint8]
)

func RequiredWithoutAllUint8() accumulators.RequiredWithoutAll[uint8] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllUint8)
}

func provideRequiredWithoutAllUint8(names string, required bool) yav.ValidateFunc[uint8] {
	if !required {
		return OmitEmpty[uint8]
	}

	if validateFunc, ok := requiredWithoutAllUint8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllUint8Funcs, names, requiredWithoutAllUint8(names))
}

func requiredWithoutAllUint8(names string) yav.ValidateFunc[uint8] {
	return func(name string, value uint8) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllUint16Funcs map[string]yav.ValidateFunc[uint16]
)

func RequiredWithoutAllUint16() accumulators.RequiredWithoutAll[uint16] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllUint16)
}

func provideRequiredWithoutAllUint16(names string, required bool) yav.ValidateFunc[uint16] {
	if !required {
		return OmitEmpty[uint16]
	}

	if validateFunc, ok := requiredWithoutAllUint16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllUint16Funcs, names, requiredWithoutAllUint16(names))
}

func requiredWithoutAllUint16(names string) yav.ValidateFunc[uint16] {
	return func(name string, value uint16) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllUint32Funcs map[string]yav.ValidateFunc[uint32]
)

func RequiredWithoutAllUint32() accumulators.RequiredWithoutAll[uint32] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllUint32)
}

func provideRequiredWithoutAllUint32(names string, required bool) yav.ValidateFunc[uint32] {
	if !required {
		return OmitEmpty[uint32]
	}

	if validateFunc, ok := requiredWithoutAllUint32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllUint32Funcs, names, requiredWithoutAllUint32(names))
}

func requiredWithoutAllUint32(names string) yav.ValidateFunc[uint32] {
	return func(name string, value uint32) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllUint64Funcs map[string]yav.ValidateFunc[uint64]
)

func RequiredWithoutAllUint64() accumulators.RequiredWithoutAll[uint64] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllUint64)
}

func provideRequiredWithoutAllUint64(names string, required bool) yav.ValidateFunc[uint64] {
	if !required {
		return OmitEmpty[uint64]
	}

	if validateFunc, ok := requiredWithoutAllUint64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllUint64Funcs, names, requiredWithoutAllUint64(names))
}

func requiredWithoutAllUint64(names string) yav.ValidateFunc[uint64] {
	return func(name string, value uint64) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllFloat32Funcs map[string]yav.ValidateFunc[float32]
)

func RequiredWithoutAllFloat32() accumulators.RequiredWithoutAll[float32] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllFloat32)
}

func provideRequiredWithoutAllFloat32(names string, required bool) yav.ValidateFunc[float32] {
	if !required {
		return OmitEmpty[float32]
	}

	if validateFunc, ok := requiredWithoutAllFloat32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllFloat32Funcs, names, requiredWithoutAllFloat32(names))
}

func requiredWithoutAllFloat32(names string) yav.ValidateFunc[float32] {
	return func(name string, value float32) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAllFloat64Funcs map[string]yav.ValidateFunc[float64]
)

func RequiredWithoutAllFloat64() accumulators.RequiredWithoutAll[float64] {
	return accumulators.NewRequiredWithoutAll(provideRequiredWithoutAllFloat64)
}

func provideRequiredWithoutAllFloat64(names string, required bool) yav.ValidateFunc[float64] {
	if !required {
		return OmitEmpty[float64]
	}

	if validateFunc, ok := requiredWithoutAllFloat64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAllFloat64Funcs, names, requiredWithoutAllFloat64(names))
}

func requiredWithoutAllFloat64(names string) yav.ValidateFunc[float64] {
	return func(name string, value float64) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}
