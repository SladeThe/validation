// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"reflect"
	"testing"

	"github.com/SladeThe/yav"
	"github.com/stretchr/testify/assert"
)

func TestMinInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     int(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenInt(t *testing.T) {
	type args struct {
		min, max int
		name     string
		value    int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenInt(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     int(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     int(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     int(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     int(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     int(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     int8(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int8(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenInt8(t *testing.T) {
	type args struct {
		min, max int8
		name     string
		value    int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenInt8(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     int8(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int8(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     int8(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     int8(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     int8(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     int8(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     int16(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int16(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenInt16(t *testing.T) {
	type args struct {
		min, max int16
		name     string
		value    int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenInt16(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     int16(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int16(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     int16(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     int16(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     int16(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     int16(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     int32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenInt32(t *testing.T) {
	type args struct {
		min, max int32
		name     string
		value    int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenInt32(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     int32(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     int32(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     int32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     int32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     int32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     int64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenInt64(t *testing.T) {
	type args struct {
		min, max int64
		name     string
		value    int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenInt64(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     int64(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     int64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     int64(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     int64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     int64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     int64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     uint(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenUint(t *testing.T) {
	type args struct {
		min, max uint
		name     string
		value    uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenUint(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     uint(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     uint(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     uint(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     uint8(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint8(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenUint8(t *testing.T) {
	type args struct {
		min, max uint8
		name     string
		value    uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenUint8(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     uint8(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint8(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     uint8(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint8(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     uint8(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint8(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     uint16(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint16(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenUint16(t *testing.T) {
	type args struct {
		min, max uint16
		name     string
		value    uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenUint16(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     uint16(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint16(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     uint16(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint16(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     uint16(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint16(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     uint32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenUint32(t *testing.T) {
	type args struct {
		min, max uint32
		name     string
		value    uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenUint32(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     uint32(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     uint32(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     uint32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     uint64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenUint64(t *testing.T) {
	type args struct {
		min, max uint64
		name     string
		value    uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenUint64(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     uint64(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     uint64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     uint64(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     uint64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     uint64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     float32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     float32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenFloat32(t *testing.T) {
	type args struct {
		min, max float32
		name     string
		value    float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenFloat32(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     float32(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     float32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     float32(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     float32(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     float32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     float32(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMinFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MinFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "2",
				ValueName: "v",
				Value:     float64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestMaxFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := MaxFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     float64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestBetweenFloat64(t *testing.T) {
	type args struct {
		min, max float64
		name     string
		value    float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := BetweenFloat64(a.min, a.max)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			min:   1,
			max:   2,
			name:  "",
			value: 2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid lower",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "min",
				Parameter: "1",
				ValueName: "v",
				Value:     float64(0),
			},
		},
	}, {
		name: "invalid higher",
		args: args{
			min:   1,
			max:   2,
			name:  "v",
			value: 3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "max",
				Parameter: "2",
				ValueName: "v",
				Value:     float64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     2,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lt",
				Parameter: "2",
				ValueName: "v",
				Value:     float64(2),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestLessThanOrEqualFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := LessThanOrEqualFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     3,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "lte",
				Parameter: "2",
				ValueName: "v",
				Value:     float64(3),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 1,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gt",
				Parameter: "1",
				ValueName: "v",
				Value:     float64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestGreaterThanOrEqualFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := GreaterThanOrEqualFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "valid",
		args: args{
			parameter: 2,
			name:      "",
			value:     2,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "invalid",
		args: args{
			parameter: 2,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: "gte",
				Parameter: "2",
				ValueName: "v",
				Value:     float64(1),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}
