// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/SladeThe/yav"
)

func TestEqualInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     int(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualInt(t *testing.T) {
	type args struct {
		parameter int
		name      string
		value     int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualInt(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfInt(t *testing.T) {
	type args struct {
		parameters []int
		name       string
		value      int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfInt(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []int{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []int{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     int(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     int(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     int8(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualInt8(t *testing.T) {
	type args struct {
		parameter int8
		name      string
		value     int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualInt8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfInt8(t *testing.T) {
	type args struct {
		parameters []int8
		name       string
		value      int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfInt8(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []int8{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []int8{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     int8(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     int8(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     int16(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualInt16(t *testing.T) {
	type args struct {
		parameter int16
		name      string
		value     int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualInt16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfInt16(t *testing.T) {
	type args struct {
		parameters []int16
		name       string
		value      int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfInt16(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []int16{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []int16{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     int16(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     int16(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     int32(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualInt32(t *testing.T) {
	type args struct {
		parameter int32
		name      string
		value     int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualInt32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfInt32(t *testing.T) {
	type args struct {
		parameters []int32
		name       string
		value      int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfInt32(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []int32{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []int32{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     int32(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     int32(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     int64(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualInt64(t *testing.T) {
	type args struct {
		parameter int64
		name      string
		value     int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualInt64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfInt64(t *testing.T) {
	type args struct {
		parameters []int64
		name       string
		value      int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfInt64(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []int64{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []int64{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     int64(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     int64(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     uint(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualUint(t *testing.T) {
	type args struct {
		parameter uint
		name      string
		value     uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualUint(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfUint(t *testing.T) {
	type args struct {
		parameters []uint
		name       string
		value      uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfUint(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []uint{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []uint{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     uint(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     uint(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     uint8(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualUint8(t *testing.T) {
	type args struct {
		parameter uint8
		name      string
		value     uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualUint8(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfUint8(t *testing.T) {
	type args struct {
		parameters []uint8
		name       string
		value      uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfUint8(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []uint8{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []uint8{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     uint8(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     uint8(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     uint16(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualUint16(t *testing.T) {
	type args struct {
		parameter uint16
		name      string
		value     uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualUint16(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfUint16(t *testing.T) {
	type args struct {
		parameters []uint16
		name       string
		value      uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfUint16(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []uint16{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []uint16{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     uint16(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     uint16(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     uint32(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualUint32(t *testing.T) {
	type args struct {
		parameter uint32
		name      string
		value     uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualUint32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfUint32(t *testing.T) {
	type args struct {
		parameters []uint32
		name       string
		value      uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfUint32(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []uint32{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []uint32{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     uint32(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     uint32(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     uint64(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualUint64(t *testing.T) {
	type args struct {
		parameter uint64
		name      string
		value     uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualUint64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfUint64(t *testing.T) {
	type args struct {
		parameters []uint64
		name       string
		value      uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfUint64(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []uint64{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []uint64{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     uint64(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     uint64(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     float32(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualFloat32(t *testing.T) {
	type args struct {
		parameter float32
		name      string
		value     float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualFloat32(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfFloat32(t *testing.T) {
	type args struct {
		parameters []float32
		name       string
		value      float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfFloat32(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []float32{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []float32{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     float32(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     float32(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestEqualFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := EqualFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: "1",
				ValueName: "v",
				Value:     float64(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestNotEqualFloat64(t *testing.T) {
	type args struct {
		parameter float64
		name      string
		value     float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := NotEqualFloat64(a.parameter)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "equal",
		args: args{
			parameter: 1,
			name:      "v",
			value:     1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: "1",
				ValueName: "v",
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestOneOfFloat64(t *testing.T) {
	type args struct {
		parameters []float64
		name       string
		value      float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := OneOfFloat64(a.parameters...)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "in list",
		args: args{
			parameters: []float64{1, 2, 3},
			name:       "v",
			value:      1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "not in list",
		args: args{
			parameters: []float64{1, 2, 3},
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "1 2 3",
				ValueName: "v",
				Value:     float64(0),
			},
		},
	}, {
		name: "empty list",
		args: args{
			parameters: nil,
			name:       "v",
			value:      0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameOneOf,
				Parameter: "",
				ValueName: "v",
				Value:     float64(0),
			},
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}
