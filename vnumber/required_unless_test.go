// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/SladeThe/yav"
)

func TestRequiredUnlessInt(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessInt(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessInt8(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessInt8(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessInt16(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessInt16(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessInt32(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessInt32(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessInt64(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessInt64(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessUint(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessUint(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessUint8(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessUint8(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessUint16(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessUint16(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessUint32(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessUint32(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessUint64(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessUint64(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessFloat32(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessFloat32(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestRequiredUnlessFloat64(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := RequiredUnlessFloat64(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "empty required",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameRequiredUnless,
				Parameter: "a == b",
				ValueName: "v",
			},
		},
	}, {
		name: "empty not required",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: true,
			err:  nil,
		},
	}, {
		name: "not empty",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}
