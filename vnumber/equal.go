// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"fmt"
	"strings"

	"github.com/SladeThe/yav"
	"github.com/SladeThe/yav/internal"
)

var (
	equalIntFuncs    map[int]yav.ValidateFunc[int]
	notEqualIntFuncs map[int]yav.ValidateFunc[int]
)

func EqualInt(parameter int) yav.ValidateFunc[int] {
	if validateFunc, ok := equalIntFuncs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalIntFuncs, parameter, equalInt(parameter))
}

func NotEqualInt(parameter int) yav.ValidateFunc[int] {
	if validateFunc, ok := notEqualIntFuncs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualIntFuncs, parameter, notEqualInt(parameter))
}

func OneOfInt(parameters ...int) yav.ValidateFunc[int] {
	return func(name string, value int) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalInt(parameter int) yav.ValidateFunc[int] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualInt(parameter int) yav.ValidateFunc[int] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalInt8Funcs    map[int8]yav.ValidateFunc[int8]
	notEqualInt8Funcs map[int8]yav.ValidateFunc[int8]
)

func EqualInt8(parameter int8) yav.ValidateFunc[int8] {
	if validateFunc, ok := equalInt8Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalInt8Funcs, parameter, equalInt8(parameter))
}

func NotEqualInt8(parameter int8) yav.ValidateFunc[int8] {
	if validateFunc, ok := notEqualInt8Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualInt8Funcs, parameter, notEqualInt8(parameter))
}

func OneOfInt8(parameters ...int8) yav.ValidateFunc[int8] {
	return func(name string, value int8) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalInt8(parameter int8) yav.ValidateFunc[int8] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int8) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualInt8(parameter int8) yav.ValidateFunc[int8] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int8) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalInt16Funcs    map[int16]yav.ValidateFunc[int16]
	notEqualInt16Funcs map[int16]yav.ValidateFunc[int16]
)

func EqualInt16(parameter int16) yav.ValidateFunc[int16] {
	if validateFunc, ok := equalInt16Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalInt16Funcs, parameter, equalInt16(parameter))
}

func NotEqualInt16(parameter int16) yav.ValidateFunc[int16] {
	if validateFunc, ok := notEqualInt16Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualInt16Funcs, parameter, notEqualInt16(parameter))
}

func OneOfInt16(parameters ...int16) yav.ValidateFunc[int16] {
	return func(name string, value int16) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalInt16(parameter int16) yav.ValidateFunc[int16] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int16) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualInt16(parameter int16) yav.ValidateFunc[int16] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int16) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalInt32Funcs    map[int32]yav.ValidateFunc[int32]
	notEqualInt32Funcs map[int32]yav.ValidateFunc[int32]
)

func EqualInt32(parameter int32) yav.ValidateFunc[int32] {
	if validateFunc, ok := equalInt32Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalInt32Funcs, parameter, equalInt32(parameter))
}

func NotEqualInt32(parameter int32) yav.ValidateFunc[int32] {
	if validateFunc, ok := notEqualInt32Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualInt32Funcs, parameter, notEqualInt32(parameter))
}

func OneOfInt32(parameters ...int32) yav.ValidateFunc[int32] {
	return func(name string, value int32) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalInt32(parameter int32) yav.ValidateFunc[int32] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int32) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualInt32(parameter int32) yav.ValidateFunc[int32] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int32) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalInt64Funcs    map[int64]yav.ValidateFunc[int64]
	notEqualInt64Funcs map[int64]yav.ValidateFunc[int64]
)

func EqualInt64(parameter int64) yav.ValidateFunc[int64] {
	if validateFunc, ok := equalInt64Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalInt64Funcs, parameter, equalInt64(parameter))
}

func NotEqualInt64(parameter int64) yav.ValidateFunc[int64] {
	if validateFunc, ok := notEqualInt64Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualInt64Funcs, parameter, notEqualInt64(parameter))
}

func OneOfInt64(parameters ...int64) yav.ValidateFunc[int64] {
	return func(name string, value int64) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalInt64(parameter int64) yav.ValidateFunc[int64] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int64) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualInt64(parameter int64) yav.ValidateFunc[int64] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value int64) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalUintFuncs    map[uint]yav.ValidateFunc[uint]
	notEqualUintFuncs map[uint]yav.ValidateFunc[uint]
)

func EqualUint(parameter uint) yav.ValidateFunc[uint] {
	if validateFunc, ok := equalUintFuncs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalUintFuncs, parameter, equalUint(parameter))
}

func NotEqualUint(parameter uint) yav.ValidateFunc[uint] {
	if validateFunc, ok := notEqualUintFuncs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualUintFuncs, parameter, notEqualUint(parameter))
}

func OneOfUint(parameters ...uint) yav.ValidateFunc[uint] {
	return func(name string, value uint) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalUint(parameter uint) yav.ValidateFunc[uint] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualUint(parameter uint) yav.ValidateFunc[uint] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalUint8Funcs    map[uint8]yav.ValidateFunc[uint8]
	notEqualUint8Funcs map[uint8]yav.ValidateFunc[uint8]
)

func EqualUint8(parameter uint8) yav.ValidateFunc[uint8] {
	if validateFunc, ok := equalUint8Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalUint8Funcs, parameter, equalUint8(parameter))
}

func NotEqualUint8(parameter uint8) yav.ValidateFunc[uint8] {
	if validateFunc, ok := notEqualUint8Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualUint8Funcs, parameter, notEqualUint8(parameter))
}

func OneOfUint8(parameters ...uint8) yav.ValidateFunc[uint8] {
	return func(name string, value uint8) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalUint8(parameter uint8) yav.ValidateFunc[uint8] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint8) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualUint8(parameter uint8) yav.ValidateFunc[uint8] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint8) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalUint16Funcs    map[uint16]yav.ValidateFunc[uint16]
	notEqualUint16Funcs map[uint16]yav.ValidateFunc[uint16]
)

func EqualUint16(parameter uint16) yav.ValidateFunc[uint16] {
	if validateFunc, ok := equalUint16Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalUint16Funcs, parameter, equalUint16(parameter))
}

func NotEqualUint16(parameter uint16) yav.ValidateFunc[uint16] {
	if validateFunc, ok := notEqualUint16Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualUint16Funcs, parameter, notEqualUint16(parameter))
}

func OneOfUint16(parameters ...uint16) yav.ValidateFunc[uint16] {
	return func(name string, value uint16) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalUint16(parameter uint16) yav.ValidateFunc[uint16] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint16) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualUint16(parameter uint16) yav.ValidateFunc[uint16] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint16) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalUint32Funcs    map[uint32]yav.ValidateFunc[uint32]
	notEqualUint32Funcs map[uint32]yav.ValidateFunc[uint32]
)

func EqualUint32(parameter uint32) yav.ValidateFunc[uint32] {
	if validateFunc, ok := equalUint32Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalUint32Funcs, parameter, equalUint32(parameter))
}

func NotEqualUint32(parameter uint32) yav.ValidateFunc[uint32] {
	if validateFunc, ok := notEqualUint32Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualUint32Funcs, parameter, notEqualUint32(parameter))
}

func OneOfUint32(parameters ...uint32) yav.ValidateFunc[uint32] {
	return func(name string, value uint32) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalUint32(parameter uint32) yav.ValidateFunc[uint32] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint32) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualUint32(parameter uint32) yav.ValidateFunc[uint32] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint32) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalUint64Funcs    map[uint64]yav.ValidateFunc[uint64]
	notEqualUint64Funcs map[uint64]yav.ValidateFunc[uint64]
)

func EqualUint64(parameter uint64) yav.ValidateFunc[uint64] {
	if validateFunc, ok := equalUint64Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalUint64Funcs, parameter, equalUint64(parameter))
}

func NotEqualUint64(parameter uint64) yav.ValidateFunc[uint64] {
	if validateFunc, ok := notEqualUint64Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualUint64Funcs, parameter, notEqualUint64(parameter))
}

func OneOfUint64(parameters ...uint64) yav.ValidateFunc[uint64] {
	return func(name string, value uint64) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalUint64(parameter uint64) yav.ValidateFunc[uint64] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint64) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualUint64(parameter uint64) yav.ValidateFunc[uint64] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value uint64) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalFloat32Funcs    map[float32]yav.ValidateFunc[float32]
	notEqualFloat32Funcs map[float32]yav.ValidateFunc[float32]
)

func EqualFloat32(parameter float32) yav.ValidateFunc[float32] {
	if validateFunc, ok := equalFloat32Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalFloat32Funcs, parameter, equalFloat32(parameter))
}

func NotEqualFloat32(parameter float32) yav.ValidateFunc[float32] {
	if validateFunc, ok := notEqualFloat32Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualFloat32Funcs, parameter, notEqualFloat32(parameter))
}

func OneOfFloat32(parameters ...float32) yav.ValidateFunc[float32] {
	return func(name string, value float32) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalFloat32(parameter float32) yav.ValidateFunc[float32] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value float32) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualFloat32(parameter float32) yav.ValidateFunc[float32] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value float32) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	equalFloat64Funcs    map[float64]yav.ValidateFunc[float64]
	notEqualFloat64Funcs map[float64]yav.ValidateFunc[float64]
)

func EqualFloat64(parameter float64) yav.ValidateFunc[float64] {
	if validateFunc, ok := equalFloat64Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&equalFloat64Funcs, parameter, equalFloat64(parameter))
}

func NotEqualFloat64(parameter float64) yav.ValidateFunc[float64] {
	if validateFunc, ok := notEqualFloat64Funcs[parameter]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&notEqualFloat64Funcs, parameter, notEqualFloat64(parameter))
}

func OneOfFloat64(parameters ...float64) yav.ValidateFunc[float64] {
	return func(name string, value float64) (stop bool, err error) {
		for _, parameter := range parameters {
			if value == parameter {
				return false, nil
			}
		}

		var parameterBuilder strings.Builder

		for i, parameter := range parameters {
			if i == 0 {
				parameterBuilder.WriteString(fmt.Sprintf("%v", parameter))
			} else {
				parameterBuilder.WriteString(fmt.Sprintf(" %v", parameter))
			}
		}

		return true, yav.Error{
			CheckName: yav.CheckNameOneOf,
			Parameter: parameterBuilder.String(),
			ValueName: name,
			Value:     value,
		}
	}
}

func equalFloat64(parameter float64) yav.ValidateFunc[float64] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value float64) (stop bool, err error) {
		if value != parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameEqual,
				Parameter: parameterString,
				ValueName: name,
				Value:     value,
			}
		}

		return false, nil
	}
}

func notEqualFloat64(parameter float64) yav.ValidateFunc[float64] {
	parameterString := fmt.Sprintf("%v", parameter)

	return func(name string, value float64) (stop bool, err error) {
		if value == parameter {
			return true, yav.Error{
				CheckName: yav.CheckNameNotEqual,
				Parameter: parameterString,
				ValueName: name,
			}
		}

		return false, nil
	}
}
