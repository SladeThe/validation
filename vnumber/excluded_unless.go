// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import "github.com/SladeThe/yav"

func ExcludedUnlessInt(conditionString string, condition bool) yav.ValidateFunc[int] {
	if condition {
		return yav.Next[int]
	}

	return excludedUnlessInt(conditionString).validate
}

type excludedUnlessInt string

func (r excludedUnlessInt) validate(name string, value int) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessInt8(conditionString string, condition bool) yav.ValidateFunc[int8] {
	if condition {
		return yav.Next[int8]
	}

	return excludedUnlessInt8(conditionString).validate
}

type excludedUnlessInt8 string

func (r excludedUnlessInt8) validate(name string, value int8) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessInt16(conditionString string, condition bool) yav.ValidateFunc[int16] {
	if condition {
		return yav.Next[int16]
	}

	return excludedUnlessInt16(conditionString).validate
}

type excludedUnlessInt16 string

func (r excludedUnlessInt16) validate(name string, value int16) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessInt32(conditionString string, condition bool) yav.ValidateFunc[int32] {
	if condition {
		return yav.Next[int32]
	}

	return excludedUnlessInt32(conditionString).validate
}

type excludedUnlessInt32 string

func (r excludedUnlessInt32) validate(name string, value int32) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessInt64(conditionString string, condition bool) yav.ValidateFunc[int64] {
	if condition {
		return yav.Next[int64]
	}

	return excludedUnlessInt64(conditionString).validate
}

type excludedUnlessInt64 string

func (r excludedUnlessInt64) validate(name string, value int64) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessUint(conditionString string, condition bool) yav.ValidateFunc[uint] {
	if condition {
		return yav.Next[uint]
	}

	return excludedUnlessUint(conditionString).validate
}

type excludedUnlessUint string

func (r excludedUnlessUint) validate(name string, value uint) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessUint8(conditionString string, condition bool) yav.ValidateFunc[uint8] {
	if condition {
		return yav.Next[uint8]
	}

	return excludedUnlessUint8(conditionString).validate
}

type excludedUnlessUint8 string

func (r excludedUnlessUint8) validate(name string, value uint8) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessUint16(conditionString string, condition bool) yav.ValidateFunc[uint16] {
	if condition {
		return yav.Next[uint16]
	}

	return excludedUnlessUint16(conditionString).validate
}

type excludedUnlessUint16 string

func (r excludedUnlessUint16) validate(name string, value uint16) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessUint32(conditionString string, condition bool) yav.ValidateFunc[uint32] {
	if condition {
		return yav.Next[uint32]
	}

	return excludedUnlessUint32(conditionString).validate
}

type excludedUnlessUint32 string

func (r excludedUnlessUint32) validate(name string, value uint32) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessUint64(conditionString string, condition bool) yav.ValidateFunc[uint64] {
	if condition {
		return yav.Next[uint64]
	}

	return excludedUnlessUint64(conditionString).validate
}

type excludedUnlessUint64 string

func (r excludedUnlessUint64) validate(name string, value uint64) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessFloat32(conditionString string, condition bool) yav.ValidateFunc[float32] {
	if condition {
		return yav.Next[float32]
	}

	return excludedUnlessFloat32(conditionString).validate
}

type excludedUnlessFloat32 string

func (r excludedUnlessFloat32) validate(name string, value float32) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedUnlessFloat64(conditionString string, condition bool) yav.ValidateFunc[float64] {
	if condition {
		return yav.Next[float64]
	}

	return excludedUnlessFloat64(conditionString).validate
}

type excludedUnlessFloat64 string

func (r excludedUnlessFloat64) validate(name string, value float64) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}
