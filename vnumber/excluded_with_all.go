// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"github.com/SladeThe/yav"
	"github.com/SladeThe/yav/accumulators"
	"github.com/SladeThe/yav/internal"
)

var (
	excludedWithAllIntFuncs map[string]yav.ValidateFunc[int]
)

func ExcludedWithAllInt() accumulators.ExcludedWithAll[int] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllInt)
}

func provideExcludedWithAllInt(names string, excluded bool) yav.ValidateFunc[int] {
	if !excluded {
		return yav.Next[int]
	}

	if validateFunc, ok := excludedWithAllIntFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllIntFuncs, names, excludedWithAllInt(names))
}

func excludedWithAllInt(names string) yav.ValidateFunc[int] {
	return func(name string, value int) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllInt8Funcs map[string]yav.ValidateFunc[int8]
)

func ExcludedWithAllInt8() accumulators.ExcludedWithAll[int8] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllInt8)
}

func provideExcludedWithAllInt8(names string, excluded bool) yav.ValidateFunc[int8] {
	if !excluded {
		return yav.Next[int8]
	}

	if validateFunc, ok := excludedWithAllInt8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllInt8Funcs, names, excludedWithAllInt8(names))
}

func excludedWithAllInt8(names string) yav.ValidateFunc[int8] {
	return func(name string, value int8) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllInt16Funcs map[string]yav.ValidateFunc[int16]
)

func ExcludedWithAllInt16() accumulators.ExcludedWithAll[int16] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllInt16)
}

func provideExcludedWithAllInt16(names string, excluded bool) yav.ValidateFunc[int16] {
	if !excluded {
		return yav.Next[int16]
	}

	if validateFunc, ok := excludedWithAllInt16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllInt16Funcs, names, excludedWithAllInt16(names))
}

func excludedWithAllInt16(names string) yav.ValidateFunc[int16] {
	return func(name string, value int16) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllInt32Funcs map[string]yav.ValidateFunc[int32]
)

func ExcludedWithAllInt32() accumulators.ExcludedWithAll[int32] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllInt32)
}

func provideExcludedWithAllInt32(names string, excluded bool) yav.ValidateFunc[int32] {
	if !excluded {
		return yav.Next[int32]
	}

	if validateFunc, ok := excludedWithAllInt32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllInt32Funcs, names, excludedWithAllInt32(names))
}

func excludedWithAllInt32(names string) yav.ValidateFunc[int32] {
	return func(name string, value int32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllInt64Funcs map[string]yav.ValidateFunc[int64]
)

func ExcludedWithAllInt64() accumulators.ExcludedWithAll[int64] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllInt64)
}

func provideExcludedWithAllInt64(names string, excluded bool) yav.ValidateFunc[int64] {
	if !excluded {
		return yav.Next[int64]
	}

	if validateFunc, ok := excludedWithAllInt64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllInt64Funcs, names, excludedWithAllInt64(names))
}

func excludedWithAllInt64(names string) yav.ValidateFunc[int64] {
	return func(name string, value int64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllUintFuncs map[string]yav.ValidateFunc[uint]
)

func ExcludedWithAllUint() accumulators.ExcludedWithAll[uint] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllUint)
}

func provideExcludedWithAllUint(names string, excluded bool) yav.ValidateFunc[uint] {
	if !excluded {
		return yav.Next[uint]
	}

	if validateFunc, ok := excludedWithAllUintFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllUintFuncs, names, excludedWithAllUint(names))
}

func excludedWithAllUint(names string) yav.ValidateFunc[uint] {
	return func(name string, value uint) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllUint8Funcs map[string]yav.ValidateFunc[uint8]
)

func ExcludedWithAllUint8() accumulators.ExcludedWithAll[uint8] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllUint8)
}

func provideExcludedWithAllUint8(names string, excluded bool) yav.ValidateFunc[uint8] {
	if !excluded {
		return yav.Next[uint8]
	}

	if validateFunc, ok := excludedWithAllUint8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllUint8Funcs, names, excludedWithAllUint8(names))
}

func excludedWithAllUint8(names string) yav.ValidateFunc[uint8] {
	return func(name string, value uint8) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllUint16Funcs map[string]yav.ValidateFunc[uint16]
)

func ExcludedWithAllUint16() accumulators.ExcludedWithAll[uint16] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllUint16)
}

func provideExcludedWithAllUint16(names string, excluded bool) yav.ValidateFunc[uint16] {
	if !excluded {
		return yav.Next[uint16]
	}

	if validateFunc, ok := excludedWithAllUint16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllUint16Funcs, names, excludedWithAllUint16(names))
}

func excludedWithAllUint16(names string) yav.ValidateFunc[uint16] {
	return func(name string, value uint16) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllUint32Funcs map[string]yav.ValidateFunc[uint32]
)

func ExcludedWithAllUint32() accumulators.ExcludedWithAll[uint32] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllUint32)
}

func provideExcludedWithAllUint32(names string, excluded bool) yav.ValidateFunc[uint32] {
	if !excluded {
		return yav.Next[uint32]
	}

	if validateFunc, ok := excludedWithAllUint32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllUint32Funcs, names, excludedWithAllUint32(names))
}

func excludedWithAllUint32(names string) yav.ValidateFunc[uint32] {
	return func(name string, value uint32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllUint64Funcs map[string]yav.ValidateFunc[uint64]
)

func ExcludedWithAllUint64() accumulators.ExcludedWithAll[uint64] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllUint64)
}

func provideExcludedWithAllUint64(names string, excluded bool) yav.ValidateFunc[uint64] {
	if !excluded {
		return yav.Next[uint64]
	}

	if validateFunc, ok := excludedWithAllUint64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllUint64Funcs, names, excludedWithAllUint64(names))
}

func excludedWithAllUint64(names string) yav.ValidateFunc[uint64] {
	return func(name string, value uint64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllFloat32Funcs map[string]yav.ValidateFunc[float32]
)

func ExcludedWithAllFloat32() accumulators.ExcludedWithAll[float32] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllFloat32)
}

func provideExcludedWithAllFloat32(names string, excluded bool) yav.ValidateFunc[float32] {
	if !excluded {
		return yav.Next[float32]
	}

	if validateFunc, ok := excludedWithAllFloat32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllFloat32Funcs, names, excludedWithAllFloat32(names))
}

func excludedWithAllFloat32(names string) yav.ValidateFunc[float32] {
	return func(name string, value float32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithAllFloat64Funcs map[string]yav.ValidateFunc[float64]
)

func ExcludedWithAllFloat64() accumulators.ExcludedWithAll[float64] {
	return accumulators.NewExcludedWithAll(provideExcludedWithAllFloat64)
}

func provideExcludedWithAllFloat64(names string, excluded bool) yav.ValidateFunc[float64] {
	if !excluded {
		return yav.Next[float64]
	}

	if validateFunc, ok := excludedWithAllFloat64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithAllFloat64Funcs, names, excludedWithAllFloat64(names))
}

func excludedWithAllFloat64(names string) yav.ValidateFunc[float64] {
	return func(name string, value float64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}
