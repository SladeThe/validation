// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import "github.com/SladeThe/yav"

func RequiredUnlessInt(conditionString string, condition bool) yav.ValidateFunc[int] {
	if condition {
		return OmitEmpty[int]
	}

	return requiredUnlessInt(conditionString).validate
}

type requiredUnlessInt string

func (r requiredUnlessInt) validate(name string, value int) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessInt8(conditionString string, condition bool) yav.ValidateFunc[int8] {
	if condition {
		return OmitEmpty[int8]
	}

	return requiredUnlessInt8(conditionString).validate
}

type requiredUnlessInt8 string

func (r requiredUnlessInt8) validate(name string, value int8) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessInt16(conditionString string, condition bool) yav.ValidateFunc[int16] {
	if condition {
		return OmitEmpty[int16]
	}

	return requiredUnlessInt16(conditionString).validate
}

type requiredUnlessInt16 string

func (r requiredUnlessInt16) validate(name string, value int16) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessInt32(conditionString string, condition bool) yav.ValidateFunc[int32] {
	if condition {
		return OmitEmpty[int32]
	}

	return requiredUnlessInt32(conditionString).validate
}

type requiredUnlessInt32 string

func (r requiredUnlessInt32) validate(name string, value int32) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessInt64(conditionString string, condition bool) yav.ValidateFunc[int64] {
	if condition {
		return OmitEmpty[int64]
	}

	return requiredUnlessInt64(conditionString).validate
}

type requiredUnlessInt64 string

func (r requiredUnlessInt64) validate(name string, value int64) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessUint(conditionString string, condition bool) yav.ValidateFunc[uint] {
	if condition {
		return OmitEmpty[uint]
	}

	return requiredUnlessUint(conditionString).validate
}

type requiredUnlessUint string

func (r requiredUnlessUint) validate(name string, value uint) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessUint8(conditionString string, condition bool) yav.ValidateFunc[uint8] {
	if condition {
		return OmitEmpty[uint8]
	}

	return requiredUnlessUint8(conditionString).validate
}

type requiredUnlessUint8 string

func (r requiredUnlessUint8) validate(name string, value uint8) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessUint16(conditionString string, condition bool) yav.ValidateFunc[uint16] {
	if condition {
		return OmitEmpty[uint16]
	}

	return requiredUnlessUint16(conditionString).validate
}

type requiredUnlessUint16 string

func (r requiredUnlessUint16) validate(name string, value uint16) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessUint32(conditionString string, condition bool) yav.ValidateFunc[uint32] {
	if condition {
		return OmitEmpty[uint32]
	}

	return requiredUnlessUint32(conditionString).validate
}

type requiredUnlessUint32 string

func (r requiredUnlessUint32) validate(name string, value uint32) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessUint64(conditionString string, condition bool) yav.ValidateFunc[uint64] {
	if condition {
		return OmitEmpty[uint64]
	}

	return requiredUnlessUint64(conditionString).validate
}

type requiredUnlessUint64 string

func (r requiredUnlessUint64) validate(name string, value uint64) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessFloat32(conditionString string, condition bool) yav.ValidateFunc[float32] {
	if condition {
		return OmitEmpty[float32]
	}

	return requiredUnlessFloat32(conditionString).validate
}

type requiredUnlessFloat32 string

func (r requiredUnlessFloat32) validate(name string, value float32) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func RequiredUnlessFloat64(conditionString string, condition bool) yav.ValidateFunc[float64] {
	if condition {
		return OmitEmpty[float64]
	}

	return requiredUnlessFloat64(conditionString).validate
}

type requiredUnlessFloat64 string

func (r requiredUnlessFloat64) validate(name string, value float64) (stop bool, err error) {
	if value == 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameRequiredUnless,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}
