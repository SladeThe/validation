// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"github.com/SladeThe/yav"
	"github.com/SladeThe/yav/accumulators"
	"github.com/SladeThe/yav/internal"
)

var (
	requiredWithoutAnyIntFuncs map[string]yav.ValidateFunc[int]
)

func RequiredWithoutAnyInt() accumulators.RequiredWithoutAny[int] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyInt)
}

func provideRequiredWithoutAnyInt(names string, required bool) yav.ValidateFunc[int] {
	if !required {
		return OmitEmpty[int]
	}

	if validateFunc, ok := requiredWithoutAnyIntFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyIntFuncs, names, requiredWithoutAnyInt(names))
}

func requiredWithoutAnyInt(names string) yav.ValidateFunc[int] {
	return func(name string, value int) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyInt8Funcs map[string]yav.ValidateFunc[int8]
)

func RequiredWithoutAnyInt8() accumulators.RequiredWithoutAny[int8] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyInt8)
}

func provideRequiredWithoutAnyInt8(names string, required bool) yav.ValidateFunc[int8] {
	if !required {
		return OmitEmpty[int8]
	}

	if validateFunc, ok := requiredWithoutAnyInt8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyInt8Funcs, names, requiredWithoutAnyInt8(names))
}

func requiredWithoutAnyInt8(names string) yav.ValidateFunc[int8] {
	return func(name string, value int8) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyInt16Funcs map[string]yav.ValidateFunc[int16]
)

func RequiredWithoutAnyInt16() accumulators.RequiredWithoutAny[int16] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyInt16)
}

func provideRequiredWithoutAnyInt16(names string, required bool) yav.ValidateFunc[int16] {
	if !required {
		return OmitEmpty[int16]
	}

	if validateFunc, ok := requiredWithoutAnyInt16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyInt16Funcs, names, requiredWithoutAnyInt16(names))
}

func requiredWithoutAnyInt16(names string) yav.ValidateFunc[int16] {
	return func(name string, value int16) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyInt32Funcs map[string]yav.ValidateFunc[int32]
)

func RequiredWithoutAnyInt32() accumulators.RequiredWithoutAny[int32] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyInt32)
}

func provideRequiredWithoutAnyInt32(names string, required bool) yav.ValidateFunc[int32] {
	if !required {
		return OmitEmpty[int32]
	}

	if validateFunc, ok := requiredWithoutAnyInt32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyInt32Funcs, names, requiredWithoutAnyInt32(names))
}

func requiredWithoutAnyInt32(names string) yav.ValidateFunc[int32] {
	return func(name string, value int32) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyInt64Funcs map[string]yav.ValidateFunc[int64]
)

func RequiredWithoutAnyInt64() accumulators.RequiredWithoutAny[int64] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyInt64)
}

func provideRequiredWithoutAnyInt64(names string, required bool) yav.ValidateFunc[int64] {
	if !required {
		return OmitEmpty[int64]
	}

	if validateFunc, ok := requiredWithoutAnyInt64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyInt64Funcs, names, requiredWithoutAnyInt64(names))
}

func requiredWithoutAnyInt64(names string) yav.ValidateFunc[int64] {
	return func(name string, value int64) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyUintFuncs map[string]yav.ValidateFunc[uint]
)

func RequiredWithoutAnyUint() accumulators.RequiredWithoutAny[uint] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyUint)
}

func provideRequiredWithoutAnyUint(names string, required bool) yav.ValidateFunc[uint] {
	if !required {
		return OmitEmpty[uint]
	}

	if validateFunc, ok := requiredWithoutAnyUintFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyUintFuncs, names, requiredWithoutAnyUint(names))
}

func requiredWithoutAnyUint(names string) yav.ValidateFunc[uint] {
	return func(name string, value uint) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyUint8Funcs map[string]yav.ValidateFunc[uint8]
)

func RequiredWithoutAnyUint8() accumulators.RequiredWithoutAny[uint8] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyUint8)
}

func provideRequiredWithoutAnyUint8(names string, required bool) yav.ValidateFunc[uint8] {
	if !required {
		return OmitEmpty[uint8]
	}

	if validateFunc, ok := requiredWithoutAnyUint8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyUint8Funcs, names, requiredWithoutAnyUint8(names))
}

func requiredWithoutAnyUint8(names string) yav.ValidateFunc[uint8] {
	return func(name string, value uint8) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyUint16Funcs map[string]yav.ValidateFunc[uint16]
)

func RequiredWithoutAnyUint16() accumulators.RequiredWithoutAny[uint16] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyUint16)
}

func provideRequiredWithoutAnyUint16(names string, required bool) yav.ValidateFunc[uint16] {
	if !required {
		return OmitEmpty[uint16]
	}

	if validateFunc, ok := requiredWithoutAnyUint16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyUint16Funcs, names, requiredWithoutAnyUint16(names))
}

func requiredWithoutAnyUint16(names string) yav.ValidateFunc[uint16] {
	return func(name string, value uint16) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyUint32Funcs map[string]yav.ValidateFunc[uint32]
)

func RequiredWithoutAnyUint32() accumulators.RequiredWithoutAny[uint32] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyUint32)
}

func provideRequiredWithoutAnyUint32(names string, required bool) yav.ValidateFunc[uint32] {
	if !required {
		return OmitEmpty[uint32]
	}

	if validateFunc, ok := requiredWithoutAnyUint32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyUint32Funcs, names, requiredWithoutAnyUint32(names))
}

func requiredWithoutAnyUint32(names string) yav.ValidateFunc[uint32] {
	return func(name string, value uint32) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyUint64Funcs map[string]yav.ValidateFunc[uint64]
)

func RequiredWithoutAnyUint64() accumulators.RequiredWithoutAny[uint64] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyUint64)
}

func provideRequiredWithoutAnyUint64(names string, required bool) yav.ValidateFunc[uint64] {
	if !required {
		return OmitEmpty[uint64]
	}

	if validateFunc, ok := requiredWithoutAnyUint64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyUint64Funcs, names, requiredWithoutAnyUint64(names))
}

func requiredWithoutAnyUint64(names string) yav.ValidateFunc[uint64] {
	return func(name string, value uint64) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyFloat32Funcs map[string]yav.ValidateFunc[float32]
)

func RequiredWithoutAnyFloat32() accumulators.RequiredWithoutAny[float32] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyFloat32)
}

func provideRequiredWithoutAnyFloat32(names string, required bool) yav.ValidateFunc[float32] {
	if !required {
		return OmitEmpty[float32]
	}

	if validateFunc, ok := requiredWithoutAnyFloat32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyFloat32Funcs, names, requiredWithoutAnyFloat32(names))
}

func requiredWithoutAnyFloat32(names string) yav.ValidateFunc[float32] {
	return func(name string, value float32) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	requiredWithoutAnyFloat64Funcs map[string]yav.ValidateFunc[float64]
)

func RequiredWithoutAnyFloat64() accumulators.RequiredWithoutAny[float64] {
	return accumulators.NewRequiredWithoutAny(provideRequiredWithoutAnyFloat64)
}

func provideRequiredWithoutAnyFloat64(names string, required bool) yav.ValidateFunc[float64] {
	if !required {
		return OmitEmpty[float64]
	}

	if validateFunc, ok := requiredWithoutAnyFloat64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&requiredWithoutAnyFloat64Funcs, names, requiredWithoutAnyFloat64(names))
}

func requiredWithoutAnyFloat64(names string) yav.ValidateFunc[float64] {
	return func(name string, value float64) (stop bool, err error) {
		if value == 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameRequiredWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}
