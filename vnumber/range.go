// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"fmt"

	"github.com/SladeThe/yav"
)

func MinInt(parameter int) yav.ValidateFunc[int] {
	return minInt{parameter: parameter}.validate
}

func MaxInt(parameter int) yav.ValidateFunc[int] {
	return maxInt{parameter: parameter}.validate
}

func BetweenInt(min, max int) yav.ValidateFunc[int] {
	return betweenInt{min: min, max: max}.validate
}

func LessThanInt(parameter int) yav.ValidateFunc[int] {
	return lessThanInt{parameter: parameter}.validate
}

func LessThanOrEqualInt(parameter int) yav.ValidateFunc[int] {
	return lessThanOrEqualInt{parameter: parameter}.validate
}

func GreaterThanInt(parameter int) yav.ValidateFunc[int] {
	return greaterThanInt{parameter: parameter}.validate
}

func GreaterThanOrEqualInt(parameter int) yav.ValidateFunc[int] {
	return greaterThanOrEqualInt{parameter: parameter}.validate
}

type minInt struct {
	parameter int
}

func (m minInt) validate(name string, value int) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxInt struct {
	parameter int
}

func (m maxInt) validate(name string, value int) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenInt struct {
	min, max int
}

func (b betweenInt) validate(name string, value int) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanInt struct {
	parameter int
}

func (l lessThanInt) validate(name string, value int) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualInt struct {
	parameter int
}

func (l lessThanOrEqualInt) validate(name string, value int) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanInt struct {
	parameter int
}

func (g greaterThanInt) validate(name string, value int) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualInt struct {
	parameter int
}

func (g greaterThanOrEqualInt) validate(name string, value int) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinInt8(parameter int8) yav.ValidateFunc[int8] {
	return minInt8{parameter: parameter}.validate
}

func MaxInt8(parameter int8) yav.ValidateFunc[int8] {
	return maxInt8{parameter: parameter}.validate
}

func BetweenInt8(min, max int8) yav.ValidateFunc[int8] {
	return betweenInt8{min: min, max: max}.validate
}

func LessThanInt8(parameter int8) yav.ValidateFunc[int8] {
	return lessThanInt8{parameter: parameter}.validate
}

func LessThanOrEqualInt8(parameter int8) yav.ValidateFunc[int8] {
	return lessThanOrEqualInt8{parameter: parameter}.validate
}

func GreaterThanInt8(parameter int8) yav.ValidateFunc[int8] {
	return greaterThanInt8{parameter: parameter}.validate
}

func GreaterThanOrEqualInt8(parameter int8) yav.ValidateFunc[int8] {
	return greaterThanOrEqualInt8{parameter: parameter}.validate
}

type minInt8 struct {
	parameter int8
}

func (m minInt8) validate(name string, value int8) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxInt8 struct {
	parameter int8
}

func (m maxInt8) validate(name string, value int8) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenInt8 struct {
	min, max int8
}

func (b betweenInt8) validate(name string, value int8) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanInt8 struct {
	parameter int8
}

func (l lessThanInt8) validate(name string, value int8) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualInt8 struct {
	parameter int8
}

func (l lessThanOrEqualInt8) validate(name string, value int8) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanInt8 struct {
	parameter int8
}

func (g greaterThanInt8) validate(name string, value int8) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualInt8 struct {
	parameter int8
}

func (g greaterThanOrEqualInt8) validate(name string, value int8) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinInt16(parameter int16) yav.ValidateFunc[int16] {
	return minInt16{parameter: parameter}.validate
}

func MaxInt16(parameter int16) yav.ValidateFunc[int16] {
	return maxInt16{parameter: parameter}.validate
}

func BetweenInt16(min, max int16) yav.ValidateFunc[int16] {
	return betweenInt16{min: min, max: max}.validate
}

func LessThanInt16(parameter int16) yav.ValidateFunc[int16] {
	return lessThanInt16{parameter: parameter}.validate
}

func LessThanOrEqualInt16(parameter int16) yav.ValidateFunc[int16] {
	return lessThanOrEqualInt16{parameter: parameter}.validate
}

func GreaterThanInt16(parameter int16) yav.ValidateFunc[int16] {
	return greaterThanInt16{parameter: parameter}.validate
}

func GreaterThanOrEqualInt16(parameter int16) yav.ValidateFunc[int16] {
	return greaterThanOrEqualInt16{parameter: parameter}.validate
}

type minInt16 struct {
	parameter int16
}

func (m minInt16) validate(name string, value int16) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxInt16 struct {
	parameter int16
}

func (m maxInt16) validate(name string, value int16) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenInt16 struct {
	min, max int16
}

func (b betweenInt16) validate(name string, value int16) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanInt16 struct {
	parameter int16
}

func (l lessThanInt16) validate(name string, value int16) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualInt16 struct {
	parameter int16
}

func (l lessThanOrEqualInt16) validate(name string, value int16) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanInt16 struct {
	parameter int16
}

func (g greaterThanInt16) validate(name string, value int16) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualInt16 struct {
	parameter int16
}

func (g greaterThanOrEqualInt16) validate(name string, value int16) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinInt32(parameter int32) yav.ValidateFunc[int32] {
	return minInt32{parameter: parameter}.validate
}

func MaxInt32(parameter int32) yav.ValidateFunc[int32] {
	return maxInt32{parameter: parameter}.validate
}

func BetweenInt32(min, max int32) yav.ValidateFunc[int32] {
	return betweenInt32{min: min, max: max}.validate
}

func LessThanInt32(parameter int32) yav.ValidateFunc[int32] {
	return lessThanInt32{parameter: parameter}.validate
}

func LessThanOrEqualInt32(parameter int32) yav.ValidateFunc[int32] {
	return lessThanOrEqualInt32{parameter: parameter}.validate
}

func GreaterThanInt32(parameter int32) yav.ValidateFunc[int32] {
	return greaterThanInt32{parameter: parameter}.validate
}

func GreaterThanOrEqualInt32(parameter int32) yav.ValidateFunc[int32] {
	return greaterThanOrEqualInt32{parameter: parameter}.validate
}

type minInt32 struct {
	parameter int32
}

func (m minInt32) validate(name string, value int32) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxInt32 struct {
	parameter int32
}

func (m maxInt32) validate(name string, value int32) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenInt32 struct {
	min, max int32
}

func (b betweenInt32) validate(name string, value int32) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanInt32 struct {
	parameter int32
}

func (l lessThanInt32) validate(name string, value int32) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualInt32 struct {
	parameter int32
}

func (l lessThanOrEqualInt32) validate(name string, value int32) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanInt32 struct {
	parameter int32
}

func (g greaterThanInt32) validate(name string, value int32) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualInt32 struct {
	parameter int32
}

func (g greaterThanOrEqualInt32) validate(name string, value int32) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinInt64(parameter int64) yav.ValidateFunc[int64] {
	return minInt64{parameter: parameter}.validate
}

func MaxInt64(parameter int64) yav.ValidateFunc[int64] {
	return maxInt64{parameter: parameter}.validate
}

func BetweenInt64(min, max int64) yav.ValidateFunc[int64] {
	return betweenInt64{min: min, max: max}.validate
}

func LessThanInt64(parameter int64) yav.ValidateFunc[int64] {
	return lessThanInt64{parameter: parameter}.validate
}

func LessThanOrEqualInt64(parameter int64) yav.ValidateFunc[int64] {
	return lessThanOrEqualInt64{parameter: parameter}.validate
}

func GreaterThanInt64(parameter int64) yav.ValidateFunc[int64] {
	return greaterThanInt64{parameter: parameter}.validate
}

func GreaterThanOrEqualInt64(parameter int64) yav.ValidateFunc[int64] {
	return greaterThanOrEqualInt64{parameter: parameter}.validate
}

type minInt64 struct {
	parameter int64
}

func (m minInt64) validate(name string, value int64) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxInt64 struct {
	parameter int64
}

func (m maxInt64) validate(name string, value int64) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenInt64 struct {
	min, max int64
}

func (b betweenInt64) validate(name string, value int64) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanInt64 struct {
	parameter int64
}

func (l lessThanInt64) validate(name string, value int64) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualInt64 struct {
	parameter int64
}

func (l lessThanOrEqualInt64) validate(name string, value int64) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanInt64 struct {
	parameter int64
}

func (g greaterThanInt64) validate(name string, value int64) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualInt64 struct {
	parameter int64
}

func (g greaterThanOrEqualInt64) validate(name string, value int64) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinUint(parameter uint) yav.ValidateFunc[uint] {
	return minUint{parameter: parameter}.validate
}

func MaxUint(parameter uint) yav.ValidateFunc[uint] {
	return maxUint{parameter: parameter}.validate
}

func BetweenUint(min, max uint) yav.ValidateFunc[uint] {
	return betweenUint{min: min, max: max}.validate
}

func LessThanUint(parameter uint) yav.ValidateFunc[uint] {
	return lessThanUint{parameter: parameter}.validate
}

func LessThanOrEqualUint(parameter uint) yav.ValidateFunc[uint] {
	return lessThanOrEqualUint{parameter: parameter}.validate
}

func GreaterThanUint(parameter uint) yav.ValidateFunc[uint] {
	return greaterThanUint{parameter: parameter}.validate
}

func GreaterThanOrEqualUint(parameter uint) yav.ValidateFunc[uint] {
	return greaterThanOrEqualUint{parameter: parameter}.validate
}

type minUint struct {
	parameter uint
}

func (m minUint) validate(name string, value uint) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxUint struct {
	parameter uint
}

func (m maxUint) validate(name string, value uint) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenUint struct {
	min, max uint
}

func (b betweenUint) validate(name string, value uint) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanUint struct {
	parameter uint
}

func (l lessThanUint) validate(name string, value uint) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualUint struct {
	parameter uint
}

func (l lessThanOrEqualUint) validate(name string, value uint) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanUint struct {
	parameter uint
}

func (g greaterThanUint) validate(name string, value uint) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualUint struct {
	parameter uint
}

func (g greaterThanOrEqualUint) validate(name string, value uint) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinUint8(parameter uint8) yav.ValidateFunc[uint8] {
	return minUint8{parameter: parameter}.validate
}

func MaxUint8(parameter uint8) yav.ValidateFunc[uint8] {
	return maxUint8{parameter: parameter}.validate
}

func BetweenUint8(min, max uint8) yav.ValidateFunc[uint8] {
	return betweenUint8{min: min, max: max}.validate
}

func LessThanUint8(parameter uint8) yav.ValidateFunc[uint8] {
	return lessThanUint8{parameter: parameter}.validate
}

func LessThanOrEqualUint8(parameter uint8) yav.ValidateFunc[uint8] {
	return lessThanOrEqualUint8{parameter: parameter}.validate
}

func GreaterThanUint8(parameter uint8) yav.ValidateFunc[uint8] {
	return greaterThanUint8{parameter: parameter}.validate
}

func GreaterThanOrEqualUint8(parameter uint8) yav.ValidateFunc[uint8] {
	return greaterThanOrEqualUint8{parameter: parameter}.validate
}

type minUint8 struct {
	parameter uint8
}

func (m minUint8) validate(name string, value uint8) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxUint8 struct {
	parameter uint8
}

func (m maxUint8) validate(name string, value uint8) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenUint8 struct {
	min, max uint8
}

func (b betweenUint8) validate(name string, value uint8) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanUint8 struct {
	parameter uint8
}

func (l lessThanUint8) validate(name string, value uint8) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualUint8 struct {
	parameter uint8
}

func (l lessThanOrEqualUint8) validate(name string, value uint8) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanUint8 struct {
	parameter uint8
}

func (g greaterThanUint8) validate(name string, value uint8) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualUint8 struct {
	parameter uint8
}

func (g greaterThanOrEqualUint8) validate(name string, value uint8) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinUint16(parameter uint16) yav.ValidateFunc[uint16] {
	return minUint16{parameter: parameter}.validate
}

func MaxUint16(parameter uint16) yav.ValidateFunc[uint16] {
	return maxUint16{parameter: parameter}.validate
}

func BetweenUint16(min, max uint16) yav.ValidateFunc[uint16] {
	return betweenUint16{min: min, max: max}.validate
}

func LessThanUint16(parameter uint16) yav.ValidateFunc[uint16] {
	return lessThanUint16{parameter: parameter}.validate
}

func LessThanOrEqualUint16(parameter uint16) yav.ValidateFunc[uint16] {
	return lessThanOrEqualUint16{parameter: parameter}.validate
}

func GreaterThanUint16(parameter uint16) yav.ValidateFunc[uint16] {
	return greaterThanUint16{parameter: parameter}.validate
}

func GreaterThanOrEqualUint16(parameter uint16) yav.ValidateFunc[uint16] {
	return greaterThanOrEqualUint16{parameter: parameter}.validate
}

type minUint16 struct {
	parameter uint16
}

func (m minUint16) validate(name string, value uint16) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxUint16 struct {
	parameter uint16
}

func (m maxUint16) validate(name string, value uint16) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenUint16 struct {
	min, max uint16
}

func (b betweenUint16) validate(name string, value uint16) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanUint16 struct {
	parameter uint16
}

func (l lessThanUint16) validate(name string, value uint16) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualUint16 struct {
	parameter uint16
}

func (l lessThanOrEqualUint16) validate(name string, value uint16) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanUint16 struct {
	parameter uint16
}

func (g greaterThanUint16) validate(name string, value uint16) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualUint16 struct {
	parameter uint16
}

func (g greaterThanOrEqualUint16) validate(name string, value uint16) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinUint32(parameter uint32) yav.ValidateFunc[uint32] {
	return minUint32{parameter: parameter}.validate
}

func MaxUint32(parameter uint32) yav.ValidateFunc[uint32] {
	return maxUint32{parameter: parameter}.validate
}

func BetweenUint32(min, max uint32) yav.ValidateFunc[uint32] {
	return betweenUint32{min: min, max: max}.validate
}

func LessThanUint32(parameter uint32) yav.ValidateFunc[uint32] {
	return lessThanUint32{parameter: parameter}.validate
}

func LessThanOrEqualUint32(parameter uint32) yav.ValidateFunc[uint32] {
	return lessThanOrEqualUint32{parameter: parameter}.validate
}

func GreaterThanUint32(parameter uint32) yav.ValidateFunc[uint32] {
	return greaterThanUint32{parameter: parameter}.validate
}

func GreaterThanOrEqualUint32(parameter uint32) yav.ValidateFunc[uint32] {
	return greaterThanOrEqualUint32{parameter: parameter}.validate
}

type minUint32 struct {
	parameter uint32
}

func (m minUint32) validate(name string, value uint32) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxUint32 struct {
	parameter uint32
}

func (m maxUint32) validate(name string, value uint32) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenUint32 struct {
	min, max uint32
}

func (b betweenUint32) validate(name string, value uint32) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanUint32 struct {
	parameter uint32
}

func (l lessThanUint32) validate(name string, value uint32) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualUint32 struct {
	parameter uint32
}

func (l lessThanOrEqualUint32) validate(name string, value uint32) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanUint32 struct {
	parameter uint32
}

func (g greaterThanUint32) validate(name string, value uint32) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualUint32 struct {
	parameter uint32
}

func (g greaterThanOrEqualUint32) validate(name string, value uint32) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinUint64(parameter uint64) yav.ValidateFunc[uint64] {
	return minUint64{parameter: parameter}.validate
}

func MaxUint64(parameter uint64) yav.ValidateFunc[uint64] {
	return maxUint64{parameter: parameter}.validate
}

func BetweenUint64(min, max uint64) yav.ValidateFunc[uint64] {
	return betweenUint64{min: min, max: max}.validate
}

func LessThanUint64(parameter uint64) yav.ValidateFunc[uint64] {
	return lessThanUint64{parameter: parameter}.validate
}

func LessThanOrEqualUint64(parameter uint64) yav.ValidateFunc[uint64] {
	return lessThanOrEqualUint64{parameter: parameter}.validate
}

func GreaterThanUint64(parameter uint64) yav.ValidateFunc[uint64] {
	return greaterThanUint64{parameter: parameter}.validate
}

func GreaterThanOrEqualUint64(parameter uint64) yav.ValidateFunc[uint64] {
	return greaterThanOrEqualUint64{parameter: parameter}.validate
}

type minUint64 struct {
	parameter uint64
}

func (m minUint64) validate(name string, value uint64) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxUint64 struct {
	parameter uint64
}

func (m maxUint64) validate(name string, value uint64) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenUint64 struct {
	min, max uint64
}

func (b betweenUint64) validate(name string, value uint64) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanUint64 struct {
	parameter uint64
}

func (l lessThanUint64) validate(name string, value uint64) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualUint64 struct {
	parameter uint64
}

func (l lessThanOrEqualUint64) validate(name string, value uint64) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanUint64 struct {
	parameter uint64
}

func (g greaterThanUint64) validate(name string, value uint64) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualUint64 struct {
	parameter uint64
}

func (g greaterThanOrEqualUint64) validate(name string, value uint64) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinFloat32(parameter float32) yav.ValidateFunc[float32] {
	return minFloat32{parameter: parameter}.validate
}

func MaxFloat32(parameter float32) yav.ValidateFunc[float32] {
	return maxFloat32{parameter: parameter}.validate
}

func BetweenFloat32(min, max float32) yav.ValidateFunc[float32] {
	return betweenFloat32{min: min, max: max}.validate
}

func LessThanFloat32(parameter float32) yav.ValidateFunc[float32] {
	return lessThanFloat32{parameter: parameter}.validate
}

func LessThanOrEqualFloat32(parameter float32) yav.ValidateFunc[float32] {
	return lessThanOrEqualFloat32{parameter: parameter}.validate
}

func GreaterThanFloat32(parameter float32) yav.ValidateFunc[float32] {
	return greaterThanFloat32{parameter: parameter}.validate
}

func GreaterThanOrEqualFloat32(parameter float32) yav.ValidateFunc[float32] {
	return greaterThanOrEqualFloat32{parameter: parameter}.validate
}

type minFloat32 struct {
	parameter float32
}

func (m minFloat32) validate(name string, value float32) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxFloat32 struct {
	parameter float32
}

func (m maxFloat32) validate(name string, value float32) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenFloat32 struct {
	min, max float32
}

func (b betweenFloat32) validate(name string, value float32) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanFloat32 struct {
	parameter float32
}

func (l lessThanFloat32) validate(name string, value float32) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualFloat32 struct {
	parameter float32
}

func (l lessThanOrEqualFloat32) validate(name string, value float32) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanFloat32 struct {
	parameter float32
}

func (g greaterThanFloat32) validate(name string, value float32) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualFloat32 struct {
	parameter float32
}

func (g greaterThanOrEqualFloat32) validate(name string, value float32) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

func MinFloat64(parameter float64) yav.ValidateFunc[float64] {
	return minFloat64{parameter: parameter}.validate
}

func MaxFloat64(parameter float64) yav.ValidateFunc[float64] {
	return maxFloat64{parameter: parameter}.validate
}

func BetweenFloat64(min, max float64) yav.ValidateFunc[float64] {
	return betweenFloat64{min: min, max: max}.validate
}

func LessThanFloat64(parameter float64) yav.ValidateFunc[float64] {
	return lessThanFloat64{parameter: parameter}.validate
}

func LessThanOrEqualFloat64(parameter float64) yav.ValidateFunc[float64] {
	return lessThanOrEqualFloat64{parameter: parameter}.validate
}

func GreaterThanFloat64(parameter float64) yav.ValidateFunc[float64] {
	return greaterThanFloat64{parameter: parameter}.validate
}

func GreaterThanOrEqualFloat64(parameter float64) yav.ValidateFunc[float64] {
	return greaterThanOrEqualFloat64{parameter: parameter}.validate
}

type minFloat64 struct {
	parameter float64
}

func (m minFloat64) validate(name string, value float64) (stop bool, err error) {
	if value < m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type maxFloat64 struct {
	parameter float64
}

func (m maxFloat64) validate(name string, value float64) (stop bool, err error) {
	if value > m.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", m.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type betweenFloat64 struct {
	min, max float64
}

func (b betweenFloat64) validate(name string, value float64) (stop bool, err error) {
	if value < b.min {
		return true, yav.Error{
			CheckName: yav.CheckNameMin,
			Parameter: fmt.Sprintf("%v", b.min),
			ValueName: name,
			Value:     value,
		}
	}

	if value > b.max {
		return true, yav.Error{
			CheckName: yav.CheckNameMax,
			Parameter: fmt.Sprintf("%v", b.max),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanFloat64 struct {
	parameter float64
}

func (l lessThanFloat64) validate(name string, value float64) (stop bool, err error) {
	if value >= l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThan,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type lessThanOrEqualFloat64 struct {
	parameter float64
}

func (l lessThanOrEqualFloat64) validate(name string, value float64) (stop bool, err error) {
	if value > l.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameLessThanOrEqual,
			Parameter: fmt.Sprintf("%v", l.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanFloat64 struct {
	parameter float64
}

func (g greaterThanFloat64) validate(name string, value float64) (stop bool, err error) {
	if value <= g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThan,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}

type greaterThanOrEqualFloat64 struct {
	parameter float64
}

func (g greaterThanOrEqualFloat64) validate(name string, value float64) (stop bool, err error) {
	if value < g.parameter {
		return true, yav.Error{
			CheckName: yav.CheckNameGreaterThanOrEqual,
			Parameter: fmt.Sprintf("%v", g.parameter),
			ValueName: name,
			Value:     value,
		}
	}

	return false, nil
}
