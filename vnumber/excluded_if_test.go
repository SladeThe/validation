// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/SladeThe/yav"
)

func TestExcludedIfInt(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfInt(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfInt8(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfInt8(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfInt16(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfInt16(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfInt32(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfInt32(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfInt64(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           int64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfInt64(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfUint(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfUint(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfUint8(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint8
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfUint8(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfUint16(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint16
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfUint16(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfUint32(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfUint32(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfUint64(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           uint64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfUint64(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfFloat32(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           float32
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfFloat32(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}

func TestExcludedIfFloat64(t *testing.T) {
	type args struct {
		condition       bool
		conditionString string
		name            string
		value           float64
	}

	type want struct {
		stop bool
		err  error
	}

	test := func(a args, w want) func(t *testing.T) {
		return func(t *testing.T) {
			stop, err := ExcludedIfFloat64(a.conditionString, a.condition)(a.name, a.value)
			assert.Equalf(t, w.stop, stop, "invalid stop: want = %v, got = %v", w.stop, stop)
			assert.Truef(t, reflect.DeepEqual(w.err, err), "invalid error: want = %v, got = %v", w.err, err)
		}
	}

	tests := []struct {
		name string
		args args
		want want
	}{{
		name: "not empty excluded",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: true,
			err: yav.Error{
				CheckName: yav.CheckNameExcludedIf,
				Parameter: "a == a",
				ValueName: "v",
			},
		},
	}, {
		name: "not empty not excluded",
		args: args{
			condition:       false,
			conditionString: "a == b",
			name:            "v",
			value:           1,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}, {
		name: "empty",
		args: args{
			condition:       true,
			conditionString: "a == a",
			name:            "v",
			value:           0,
		},
		want: want{
			stop: false,
			err:  nil,
		},
	}}

	for _, tt := range tests {
		t.Run(tt.name, test(tt.args, tt.want))
	}
}
