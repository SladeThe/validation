// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"github.com/SladeThe/yav"
	"github.com/SladeThe/yav/accumulators"
	"github.com/SladeThe/yav/internal"
)

var (
	excludedWithoutAnyIntFuncs map[string]yav.ValidateFunc[int]
)

func ExcludedWithoutAnyInt() accumulators.ExcludedWithoutAny[int] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyInt)
}

func provideExcludedWithoutAnyInt(names string, excluded bool) yav.ValidateFunc[int] {
	if !excluded {
		return yav.Next[int]
	}

	if validateFunc, ok := excludedWithoutAnyIntFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyIntFuncs, names, excludedWithoutAnyInt(names))
}

func excludedWithoutAnyInt(names string) yav.ValidateFunc[int] {
	return func(name string, value int) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyInt8Funcs map[string]yav.ValidateFunc[int8]
)

func ExcludedWithoutAnyInt8() accumulators.ExcludedWithoutAny[int8] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyInt8)
}

func provideExcludedWithoutAnyInt8(names string, excluded bool) yav.ValidateFunc[int8] {
	if !excluded {
		return yav.Next[int8]
	}

	if validateFunc, ok := excludedWithoutAnyInt8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyInt8Funcs, names, excludedWithoutAnyInt8(names))
}

func excludedWithoutAnyInt8(names string) yav.ValidateFunc[int8] {
	return func(name string, value int8) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyInt16Funcs map[string]yav.ValidateFunc[int16]
)

func ExcludedWithoutAnyInt16() accumulators.ExcludedWithoutAny[int16] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyInt16)
}

func provideExcludedWithoutAnyInt16(names string, excluded bool) yav.ValidateFunc[int16] {
	if !excluded {
		return yav.Next[int16]
	}

	if validateFunc, ok := excludedWithoutAnyInt16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyInt16Funcs, names, excludedWithoutAnyInt16(names))
}

func excludedWithoutAnyInt16(names string) yav.ValidateFunc[int16] {
	return func(name string, value int16) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyInt32Funcs map[string]yav.ValidateFunc[int32]
)

func ExcludedWithoutAnyInt32() accumulators.ExcludedWithoutAny[int32] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyInt32)
}

func provideExcludedWithoutAnyInt32(names string, excluded bool) yav.ValidateFunc[int32] {
	if !excluded {
		return yav.Next[int32]
	}

	if validateFunc, ok := excludedWithoutAnyInt32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyInt32Funcs, names, excludedWithoutAnyInt32(names))
}

func excludedWithoutAnyInt32(names string) yav.ValidateFunc[int32] {
	return func(name string, value int32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyInt64Funcs map[string]yav.ValidateFunc[int64]
)

func ExcludedWithoutAnyInt64() accumulators.ExcludedWithoutAny[int64] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyInt64)
}

func provideExcludedWithoutAnyInt64(names string, excluded bool) yav.ValidateFunc[int64] {
	if !excluded {
		return yav.Next[int64]
	}

	if validateFunc, ok := excludedWithoutAnyInt64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyInt64Funcs, names, excludedWithoutAnyInt64(names))
}

func excludedWithoutAnyInt64(names string) yav.ValidateFunc[int64] {
	return func(name string, value int64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyUintFuncs map[string]yav.ValidateFunc[uint]
)

func ExcludedWithoutAnyUint() accumulators.ExcludedWithoutAny[uint] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyUint)
}

func provideExcludedWithoutAnyUint(names string, excluded bool) yav.ValidateFunc[uint] {
	if !excluded {
		return yav.Next[uint]
	}

	if validateFunc, ok := excludedWithoutAnyUintFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyUintFuncs, names, excludedWithoutAnyUint(names))
}

func excludedWithoutAnyUint(names string) yav.ValidateFunc[uint] {
	return func(name string, value uint) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyUint8Funcs map[string]yav.ValidateFunc[uint8]
)

func ExcludedWithoutAnyUint8() accumulators.ExcludedWithoutAny[uint8] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyUint8)
}

func provideExcludedWithoutAnyUint8(names string, excluded bool) yav.ValidateFunc[uint8] {
	if !excluded {
		return yav.Next[uint8]
	}

	if validateFunc, ok := excludedWithoutAnyUint8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyUint8Funcs, names, excludedWithoutAnyUint8(names))
}

func excludedWithoutAnyUint8(names string) yav.ValidateFunc[uint8] {
	return func(name string, value uint8) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyUint16Funcs map[string]yav.ValidateFunc[uint16]
)

func ExcludedWithoutAnyUint16() accumulators.ExcludedWithoutAny[uint16] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyUint16)
}

func provideExcludedWithoutAnyUint16(names string, excluded bool) yav.ValidateFunc[uint16] {
	if !excluded {
		return yav.Next[uint16]
	}

	if validateFunc, ok := excludedWithoutAnyUint16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyUint16Funcs, names, excludedWithoutAnyUint16(names))
}

func excludedWithoutAnyUint16(names string) yav.ValidateFunc[uint16] {
	return func(name string, value uint16) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyUint32Funcs map[string]yav.ValidateFunc[uint32]
)

func ExcludedWithoutAnyUint32() accumulators.ExcludedWithoutAny[uint32] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyUint32)
}

func provideExcludedWithoutAnyUint32(names string, excluded bool) yav.ValidateFunc[uint32] {
	if !excluded {
		return yav.Next[uint32]
	}

	if validateFunc, ok := excludedWithoutAnyUint32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyUint32Funcs, names, excludedWithoutAnyUint32(names))
}

func excludedWithoutAnyUint32(names string) yav.ValidateFunc[uint32] {
	return func(name string, value uint32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyUint64Funcs map[string]yav.ValidateFunc[uint64]
)

func ExcludedWithoutAnyUint64() accumulators.ExcludedWithoutAny[uint64] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyUint64)
}

func provideExcludedWithoutAnyUint64(names string, excluded bool) yav.ValidateFunc[uint64] {
	if !excluded {
		return yav.Next[uint64]
	}

	if validateFunc, ok := excludedWithoutAnyUint64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyUint64Funcs, names, excludedWithoutAnyUint64(names))
}

func excludedWithoutAnyUint64(names string) yav.ValidateFunc[uint64] {
	return func(name string, value uint64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyFloat32Funcs map[string]yav.ValidateFunc[float32]
)

func ExcludedWithoutAnyFloat32() accumulators.ExcludedWithoutAny[float32] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyFloat32)
}

func provideExcludedWithoutAnyFloat32(names string, excluded bool) yav.ValidateFunc[float32] {
	if !excluded {
		return yav.Next[float32]
	}

	if validateFunc, ok := excludedWithoutAnyFloat32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyFloat32Funcs, names, excludedWithoutAnyFloat32(names))
}

func excludedWithoutAnyFloat32(names string) yav.ValidateFunc[float32] {
	return func(name string, value float32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAnyFloat64Funcs map[string]yav.ValidateFunc[float64]
)

func ExcludedWithoutAnyFloat64() accumulators.ExcludedWithoutAny[float64] {
	return accumulators.NewExcludedWithoutAny(provideExcludedWithoutAnyFloat64)
}

func provideExcludedWithoutAnyFloat64(names string, excluded bool) yav.ValidateFunc[float64] {
	if !excluded {
		return yav.Next[float64]
	}

	if validateFunc, ok := excludedWithoutAnyFloat64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAnyFloat64Funcs, names, excludedWithoutAnyFloat64(names))
}

func excludedWithoutAnyFloat64(names string) yav.ValidateFunc[float64] {
	return func(name string, value float64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAny,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}
