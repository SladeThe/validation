// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import "github.com/SladeThe/yav"

func ExcludedIfInt(conditionString string, condition bool) yav.ValidateFunc[int] {
	if !condition {
		return yav.Next[int]
	}

	return excludedIfInt(conditionString).validate
}

type excludedIfInt string

func (r excludedIfInt) validate(name string, value int) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfInt8(conditionString string, condition bool) yav.ValidateFunc[int8] {
	if !condition {
		return yav.Next[int8]
	}

	return excludedIfInt8(conditionString).validate
}

type excludedIfInt8 string

func (r excludedIfInt8) validate(name string, value int8) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfInt16(conditionString string, condition bool) yav.ValidateFunc[int16] {
	if !condition {
		return yav.Next[int16]
	}

	return excludedIfInt16(conditionString).validate
}

type excludedIfInt16 string

func (r excludedIfInt16) validate(name string, value int16) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfInt32(conditionString string, condition bool) yav.ValidateFunc[int32] {
	if !condition {
		return yav.Next[int32]
	}

	return excludedIfInt32(conditionString).validate
}

type excludedIfInt32 string

func (r excludedIfInt32) validate(name string, value int32) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfInt64(conditionString string, condition bool) yav.ValidateFunc[int64] {
	if !condition {
		return yav.Next[int64]
	}

	return excludedIfInt64(conditionString).validate
}

type excludedIfInt64 string

func (r excludedIfInt64) validate(name string, value int64) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfUint(conditionString string, condition bool) yav.ValidateFunc[uint] {
	if !condition {
		return yav.Next[uint]
	}

	return excludedIfUint(conditionString).validate
}

type excludedIfUint string

func (r excludedIfUint) validate(name string, value uint) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfUint8(conditionString string, condition bool) yav.ValidateFunc[uint8] {
	if !condition {
		return yav.Next[uint8]
	}

	return excludedIfUint8(conditionString).validate
}

type excludedIfUint8 string

func (r excludedIfUint8) validate(name string, value uint8) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfUint16(conditionString string, condition bool) yav.ValidateFunc[uint16] {
	if !condition {
		return yav.Next[uint16]
	}

	return excludedIfUint16(conditionString).validate
}

type excludedIfUint16 string

func (r excludedIfUint16) validate(name string, value uint16) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfUint32(conditionString string, condition bool) yav.ValidateFunc[uint32] {
	if !condition {
		return yav.Next[uint32]
	}

	return excludedIfUint32(conditionString).validate
}

type excludedIfUint32 string

func (r excludedIfUint32) validate(name string, value uint32) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfUint64(conditionString string, condition bool) yav.ValidateFunc[uint64] {
	if !condition {
		return yav.Next[uint64]
	}

	return excludedIfUint64(conditionString).validate
}

type excludedIfUint64 string

func (r excludedIfUint64) validate(name string, value uint64) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfFloat32(conditionString string, condition bool) yav.ValidateFunc[float32] {
	if !condition {
		return yav.Next[float32]
	}

	return excludedIfFloat32(conditionString).validate
}

type excludedIfFloat32 string

func (r excludedIfFloat32) validate(name string, value float32) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}

func ExcludedIfFloat64(conditionString string, condition bool) yav.ValidateFunc[float64] {
	if !condition {
		return yav.Next[float64]
	}

	return excludedIfFloat64(conditionString).validate
}

type excludedIfFloat64 string

func (r excludedIfFloat64) validate(name string, value float64) (stop bool, err error) {
	if value != 0 {
		return true, yav.Error{
			CheckName: yav.CheckNameExcludedIf,
			Parameter: string(r),
			ValueName: name,
		}
	}

	return false, nil
}
