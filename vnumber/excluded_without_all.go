// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package vnumber

import (
	"github.com/SladeThe/yav"
	"github.com/SladeThe/yav/accumulators"
	"github.com/SladeThe/yav/internal"
)

var (
	excludedWithoutAllIntFuncs map[string]yav.ValidateFunc[int]
)

func ExcludedWithoutAllInt() accumulators.ExcludedWithoutAll[int] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllInt)
}

func provideExcludedWithoutAllInt(names string, excluded bool) yav.ValidateFunc[int] {
	if !excluded {
		return yav.Next[int]
	}

	if validateFunc, ok := excludedWithoutAllIntFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllIntFuncs, names, excludedWithoutAllInt(names))
}

func excludedWithoutAllInt(names string) yav.ValidateFunc[int] {
	return func(name string, value int) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllInt8Funcs map[string]yav.ValidateFunc[int8]
)

func ExcludedWithoutAllInt8() accumulators.ExcludedWithoutAll[int8] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllInt8)
}

func provideExcludedWithoutAllInt8(names string, excluded bool) yav.ValidateFunc[int8] {
	if !excluded {
		return yav.Next[int8]
	}

	if validateFunc, ok := excludedWithoutAllInt8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllInt8Funcs, names, excludedWithoutAllInt8(names))
}

func excludedWithoutAllInt8(names string) yav.ValidateFunc[int8] {
	return func(name string, value int8) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllInt16Funcs map[string]yav.ValidateFunc[int16]
)

func ExcludedWithoutAllInt16() accumulators.ExcludedWithoutAll[int16] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllInt16)
}

func provideExcludedWithoutAllInt16(names string, excluded bool) yav.ValidateFunc[int16] {
	if !excluded {
		return yav.Next[int16]
	}

	if validateFunc, ok := excludedWithoutAllInt16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllInt16Funcs, names, excludedWithoutAllInt16(names))
}

func excludedWithoutAllInt16(names string) yav.ValidateFunc[int16] {
	return func(name string, value int16) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllInt32Funcs map[string]yav.ValidateFunc[int32]
)

func ExcludedWithoutAllInt32() accumulators.ExcludedWithoutAll[int32] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllInt32)
}

func provideExcludedWithoutAllInt32(names string, excluded bool) yav.ValidateFunc[int32] {
	if !excluded {
		return yav.Next[int32]
	}

	if validateFunc, ok := excludedWithoutAllInt32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllInt32Funcs, names, excludedWithoutAllInt32(names))
}

func excludedWithoutAllInt32(names string) yav.ValidateFunc[int32] {
	return func(name string, value int32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllInt64Funcs map[string]yav.ValidateFunc[int64]
)

func ExcludedWithoutAllInt64() accumulators.ExcludedWithoutAll[int64] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllInt64)
}

func provideExcludedWithoutAllInt64(names string, excluded bool) yav.ValidateFunc[int64] {
	if !excluded {
		return yav.Next[int64]
	}

	if validateFunc, ok := excludedWithoutAllInt64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllInt64Funcs, names, excludedWithoutAllInt64(names))
}

func excludedWithoutAllInt64(names string) yav.ValidateFunc[int64] {
	return func(name string, value int64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllUintFuncs map[string]yav.ValidateFunc[uint]
)

func ExcludedWithoutAllUint() accumulators.ExcludedWithoutAll[uint] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllUint)
}

func provideExcludedWithoutAllUint(names string, excluded bool) yav.ValidateFunc[uint] {
	if !excluded {
		return yav.Next[uint]
	}

	if validateFunc, ok := excludedWithoutAllUintFuncs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllUintFuncs, names, excludedWithoutAllUint(names))
}

func excludedWithoutAllUint(names string) yav.ValidateFunc[uint] {
	return func(name string, value uint) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllUint8Funcs map[string]yav.ValidateFunc[uint8]
)

func ExcludedWithoutAllUint8() accumulators.ExcludedWithoutAll[uint8] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllUint8)
}

func provideExcludedWithoutAllUint8(names string, excluded bool) yav.ValidateFunc[uint8] {
	if !excluded {
		return yav.Next[uint8]
	}

	if validateFunc, ok := excludedWithoutAllUint8Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllUint8Funcs, names, excludedWithoutAllUint8(names))
}

func excludedWithoutAllUint8(names string) yav.ValidateFunc[uint8] {
	return func(name string, value uint8) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllUint16Funcs map[string]yav.ValidateFunc[uint16]
)

func ExcludedWithoutAllUint16() accumulators.ExcludedWithoutAll[uint16] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllUint16)
}

func provideExcludedWithoutAllUint16(names string, excluded bool) yav.ValidateFunc[uint16] {
	if !excluded {
		return yav.Next[uint16]
	}

	if validateFunc, ok := excludedWithoutAllUint16Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllUint16Funcs, names, excludedWithoutAllUint16(names))
}

func excludedWithoutAllUint16(names string) yav.ValidateFunc[uint16] {
	return func(name string, value uint16) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllUint32Funcs map[string]yav.ValidateFunc[uint32]
)

func ExcludedWithoutAllUint32() accumulators.ExcludedWithoutAll[uint32] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllUint32)
}

func provideExcludedWithoutAllUint32(names string, excluded bool) yav.ValidateFunc[uint32] {
	if !excluded {
		return yav.Next[uint32]
	}

	if validateFunc, ok := excludedWithoutAllUint32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllUint32Funcs, names, excludedWithoutAllUint32(names))
}

func excludedWithoutAllUint32(names string) yav.ValidateFunc[uint32] {
	return func(name string, value uint32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllUint64Funcs map[string]yav.ValidateFunc[uint64]
)

func ExcludedWithoutAllUint64() accumulators.ExcludedWithoutAll[uint64] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllUint64)
}

func provideExcludedWithoutAllUint64(names string, excluded bool) yav.ValidateFunc[uint64] {
	if !excluded {
		return yav.Next[uint64]
	}

	if validateFunc, ok := excludedWithoutAllUint64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllUint64Funcs, names, excludedWithoutAllUint64(names))
}

func excludedWithoutAllUint64(names string) yav.ValidateFunc[uint64] {
	return func(name string, value uint64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllFloat32Funcs map[string]yav.ValidateFunc[float32]
)

func ExcludedWithoutAllFloat32() accumulators.ExcludedWithoutAll[float32] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllFloat32)
}

func provideExcludedWithoutAllFloat32(names string, excluded bool) yav.ValidateFunc[float32] {
	if !excluded {
		return yav.Next[float32]
	}

	if validateFunc, ok := excludedWithoutAllFloat32Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllFloat32Funcs, names, excludedWithoutAllFloat32(names))
}

func excludedWithoutAllFloat32(names string) yav.ValidateFunc[float32] {
	return func(name string, value float32) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}

var (
	excludedWithoutAllFloat64Funcs map[string]yav.ValidateFunc[float64]
)

func ExcludedWithoutAllFloat64() accumulators.ExcludedWithoutAll[float64] {
	return accumulators.NewExcludedWithoutAll(provideExcludedWithoutAllFloat64)
}

func provideExcludedWithoutAllFloat64(names string, excluded bool) yav.ValidateFunc[float64] {
	if !excluded {
		return yav.Next[float64]
	}

	if validateFunc, ok := excludedWithoutAllFloat64Funcs[names]; ok {
		return validateFunc
	}

	return internal.RegisterMapEntry(&excludedWithoutAllFloat64Funcs, names, excludedWithoutAllFloat64(names))
}

func excludedWithoutAllFloat64(names string) yav.ValidateFunc[float64] {
	return func(name string, value float64) (stop bool, err error) {
		if value != 0 {
			return true, yav.Error{
				CheckName: yav.CheckNameExcludedWithoutAll,
				Parameter: names,
				ValueName: name,
			}
		}

		return false, nil
	}
}
